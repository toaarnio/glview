#!/usr/bin/python3 -B

# pylint: disable=missing-docstring
# pylint: disable=invalid-name
# pylint: disable=c-extension-no-member
# pylint: disable=wrong-import-position
# pylint: disable=no-member
# pylint: disable=bad-whitespace

import sys                     # built-in library
import os                      # built-in library
import time                    # built-in library
import threading               # built-in library

import argv                    # local import
import pygletui                # local import
import glrenderer              # local import
import imageprovider           # local import


IMAGE_TYPES = [".pgm", ".ppm", ".pnm", ".pfm", ".png", ".jpg", ".jpeg", ".tif", ".tiff", ".insp"]
VIDEO_TYPES = [".mp4", ".insv"]


class FileList(object):

    def __init__(self, filespecs, verbose=False):
        self.mutex = threading.Lock()
        self.verbose = verbose
        self.filespecs = filespecs
        self.numfiles = len(filespecs)
        self.orientations = [0] * self.numfiles
        self.images = [None] * self.numfiles
        self.textures = [None] * self.numfiles
        self.extensions = [None] * self.numfiles
        self.is_url = [None] * self.numfiles
        self.is_rtsp = [None] * self.numfiles
        self.is_video = [None] * self.numfiles
        self._update()

    def remove(self, idx):
        with self.mutex:
            try:
                filespec = self.filespecs.pop(idx)
                self.orientations.pop(idx)
                self.textures.pop(idx)
                self.images.pop(idx)
                self._update()
                print(f"[{self.__class__.__name__}/{threading.current_thread().name}] Deleting {filespec}...")
                os.remove(filespec)
            except IndexError:
                pass

    def _update(self):
        self.numfiles = len(self.filespecs)
        self.extensions = [os.path.splitext(f)[1].lower() for f in self.filespecs]
        self.is_url = ["://" in f for f in self.filespecs]
        self.is_rtsp = ["rtsp://" in f for f in self.filespecs]
        self.is_video = [(ext in VIDEO_TYPES) for ext in self.extensions]
        self.is_video = [(v or r) for (v, r) in zip(self.is_video, self.is_rtsp)]


def main():
    numtiles = argv.intval("--split", default=1, accepted=[1, 2, 3, 4])
    raw_width, raw_height = argv.intpair("--size", default=(None, None))
    raw_bpp = argv.intval("--bpp", default=None, accepted=[8, 10, 12, 14, 16])
    url = argv.stringval("--url", default=None)
    verbose = argv.exists("--verbose")
    show_help = argv.exists("--help")
    argv.exitIfAnyUnparsedOptions()
    if show_help:
        print("Usage: glview [options] [image.(pgm|ppm|pnm|png|jpg|insp|raw|mp4|insv)] ...")
        print()
        print("  options:")
        print("    --split 1|2|3|4     display images in N separate tiles")
        print("    --size W H          input image size in pixels (.RAW only)")
        print("    --bpp N             input image bits per pixel (.RAW only)")
        print("    --url <address>     load image from the given web address")
        print("    --verbose           print extra traces to the console")
        print("    --help              show this help message")
        print()
        print("  runtime:")
        print("    mouse wheel         zoom image; synchronized if multiple tiles")
        print("    mouse left + move   pan image; synchronized if multiple tiles")
        print("    PageUp / PageDown   cycle through images on active tile")
        print("    r                   rotate active tile 90 degrees clockwise")
        print("    s                   split window into 1/2/3/4 tiles")
        print("    1 / 2 / 3 / 4       select active tile for PageUp/PageDown/r")
        print("    w                   write current tile(s) to a PNG")
        print("    f                   toggle fullscreen <-> windowed")
        print("    t                   toggle nearest <-> linear filtering")
        print("    g                   toggle sRGB gamma correction on/off")
        print("    b                   increase brightness in 0.5 EV steps")
        print("    i                   print image information (EXIF)")
        print("    q / esc / ctrl+c    terminate")
        print()
        print("  supported file types:")
        print("   ", '\n    '.join(IMAGE_TYPES))
        print()
        sys.exit(-1)

    filepatterns = sys.argv[1:] or url or ["*"]
    rawfiles, _ = argv.filenames(filepatterns, [".raw"], sort=True, allowAllCaps=True)
    use_raw = len(rawfiles) > 0
    use_raw = use_raw and not warn(use_raw and raw_bpp is None, "'--bpp N' not provided, ignoring all .RAW images.")
    use_raw = use_raw and not warn(use_raw and raw_width is None, "'--size M N' not provided, ignoring all .RAW images.")
    extensions = IMAGE_TYPES  # TODO: add support for VIDEO_TYPES
    extensions += [".raw"] if use_raw else []
    filenames, _ = argv.filenames(filepatterns, extensions, sort=True, allowAllCaps=True)
    filenames += [url] if url is not None else []
    numfiles = len(filenames)
    enforce(numfiles > 0, "No valid images to show. Terminating.")
    enforce(not use_raw, "Bayer RAW is not yet supported. Terminating.")
    print("See 'glview --help' for command-line options and keyboard commands.")

    files = FileList(filenames, verbose)
    ui = pygletui.PygletUI(files, numtiles, verbose)
    loader = imageprovider.ImageProviderMT(files, verbose)
    renderer = glrenderer.GLRenderer(ui, files, loader, verbose)
    ui.start(renderer)
    loader.start()
    main_loop([ui, loader])
    loader.stop()
    ui.stop()


def main_loop(modules):
    try:
        while all([m.running for m in modules]):
            time.sleep(0.1)
    except (KeyboardInterrupt, SystemExit):
        print("Ctrl+C pressed, terminating...")
        sys.exit(-1)


def enforce(expression, messageIfFalse):
    if not expression:
        print(messageIfFalse)
        sys.exit(-1)


def warn(expression, messageIfTrue):
    if expression:
        print(messageIfTrue)
    return expression


if __name__ == "__main__":
    main()
